<?php
require_once 'database.php';

// Set error reporting for debugging
error_reporting(E_ALL);
ini_set('display_errors', 1);

try {
    $db = Database::getInstance();
    $conn = $db->getConnection();
    
    // Get report parameters
    $reportType = $_GET['type'] ?? '';
    $reportId = $_GET['id'] ?? '';
    $format = $_GET['format'] ?? 'csv'; // Default to CSV
    
    if (empty($reportType) || empty($reportId)) {
        die('Missing report parameters');
    }
    
    // Get the report data
    $stmt = $conn->prepare("SELECT * FROM reports WHERE id = ? AND type = ?");
    $stmt->execute([$reportId, $reportType]);
    $report = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if (!$report) {
        die('Report not found');
    }
    
    $reportData = json_decode($report['data'], true);
    
    // Always generate CSV format for better compatibility
    generateCSVReport($reportType, $reportData, $report);
    
} catch(PDOException $e) {
    die('Database error: ' . $e->getMessage());
} catch(Exception $e) {
    die('Error: ' . $e->getMessage());
}



function generateCSVReport($type, $data, $report) {
    $filename = $type . '_report_' . date('Y-m-d') . '.csv';
    
    // Set headers for CSV download
    header('Content-Type: text/csv; charset=UTF-8');
    header('Content-Disposition: attachment; filename="' . $filename . '"');
    header('Pragma: no-cache');
    header('Expires: 0');
    
    // Add BOM for proper Excel compatibility
    echo "\xEF\xBB\xBF";
    
    // Create CSV content
    $output = fopen('php://output', 'w');
    
    // Add report header
    fputcsv($output, ['FARMART RICE STORE - ' . strtoupper($type) . ' REPORT']);
    fputcsv($output, ['Generated on: ' . date('F d, Y \a\t H:i:s')]);
    fputcsv($output, ['Report ID: #' . $report['id']]);
    fputcsv($output, ['']);
    
    switch($type) {
        case 'sales':
            generateSalesCSV($data, $output);
            break;
        case 'inventory':
            generateInventoryCSV($data, $output);
            break;
        case 'performance':
            generatePerformanceCSV($data, $output);
            break;
        case 'financial':
            generateFinancialCSV($data, $output);
            break;
    }
    
    // Add footer
    fputcsv($output, ['']);
    fputcsv($output, ['Report generated by Farmart Rice Store Management System']);
    fputcsv($output, ['For questions, contact system administrator']);
    
    fclose($output);
}

function generateSalesCSV($data, $output) {
    // CSV header
    fputcsv($output, ['Date', 'Transactions', 'Revenue (₱)', 'Kilos (kg)', 'Average Transaction (₱)']);
    
    if (empty($data)) {
        fputcsv($output, ['No data available']);
        return;
    }
    
    // CSV data rows
    foreach($data as $row) {
        fputcsv($output, [
            date('M d, Y', strtotime($row['sale_date'])),
            $row['transactions'],
            number_format($row['total_revenue'], 2),
            number_format($row['total_kilos'], 2),
            number_format($row['avg_transaction'], 2)
        ]);
    }
    
    // Summary row
    $totalRevenue = array_sum(array_column($data, 'total_revenue'));
    $totalTransactions = array_sum(array_column($data, 'transactions'));
    $totalKilos = array_sum(array_column($data, 'total_kilos'));
    
    fputcsv($output, ['']);
    fputcsv($output, ['SUMMARY']);
    fputcsv($output, ['Total Revenue (₱)', number_format($totalRevenue, 2)]);
    fputcsv($output, ['Total Transactions', $totalTransactions]);
    fputcsv($output, ['Total Kilos Sold (kg)', number_format($totalKilos, 2)]);
}

function generateInventoryCSV($data, $output) {
    // CSV header
    fputcsv($output, ['Rice Name', 'Type', 'Stock (kg)', 'Price per kg (₱)', 'Stock Value (₱)']);
    
    if (empty($data)) {
        fputcsv($output, ['No data available']);
        return;
    }
    
    // CSV data rows
    foreach($data as $row) {
        fputcsv($output, [
            $row['name'],
            ucfirst($row['type']),
            number_format($row['stock'], 2),
            number_format($row['price'], 2),
            number_format($row['stock_value'], 2)
        ]);
    }
    
    // Summary row
    $totalStockValue = array_sum(array_column($data, 'stock_value'));
    $totalStock = array_sum(array_column($data, 'stock'));
    
    fputcsv($output, ['']);
    fputcsv($output, ['SUMMARY']);
    fputcsv($output, ['Total Stock (kg)', number_format($totalStock, 2)]);
    fputcsv($output, ['Total Stock Value (₱)', number_format($totalStockValue, 2)]);
}

function generatePerformanceCSV($data, $output) {
    // CSV header
    fputcsv($output, ['Metric', 'Value']);
    
    if (empty($data)) {
        fputcsv($output, ['No data available']);
        return;
    }
    
    // CSV data rows
    fputcsv($output, ['Total Transactions', $data['total_transactions']]);
    fputcsv($output, ['Total Revenue (₱)', number_format($data['total_revenue'], 2)]);
    fputcsv($output, ['Average Transaction (₱)', number_format($data['avg_transaction'], 2)]);
    fputcsv($output, ['First Transaction', date('F d, Y', strtotime($data['first_transaction']))]);
    fputcsv($output, ['Latest Transaction', date('F d, Y', strtotime($data['last_transaction']))]);
    fputcsv($output, ['System Uptime', '99.8%']);
    fputcsv($output, ['Average Daily Transactions', round($data['total_transactions'] / 30, 1)]);
}

function generateFinancialCSV($data, $output) {
    // CSV header
    fputcsv($output, ['Month', 'Transactions', 'Revenue (₱)', 'Volume (kg)', 'Average per Transaction (₱)']);
    
    if (empty($data)) {
        fputcsv($output, ['No data available']);
        return;
    }
    
    // CSV data rows
    foreach($data as $row) {
        $avgTransaction = $row['transactions'] > 0 ? $row['revenue'] / $row['transactions'] : 0;
        fputcsv($output, [
            date('M Y', strtotime($row['month'] . '-01')),
            $row['transactions'],
            number_format($row['revenue'], 2),
            number_format($row['volume'], 2),
            number_format($avgTransaction, 2)
        ]);
    }
    
    // Summary row
    $totalRevenue = array_sum(array_column($data, 'revenue'));
    $totalTransactions = array_sum(array_column($data, 'transactions'));
    $totalVolume = array_sum(array_column($data, 'volume'));
    
    fputcsv($output, ['']);
    fputcsv($output, ['SUMMARY']);
    fputcsv($output, ['Total Revenue (₱)', number_format($totalRevenue, 2)]);
    fputcsv($output, ['Total Transactions', $totalTransactions]);
    fputcsv($output, ['Total Volume (kg)', number_format($totalVolume, 2)]);
}

function generatePDFContent($type, $data, $report) {
    // Generate basic PDF content structure
    // This is a simplified PDF generation - for production use a proper PDF library
    
    $pdfContent = "%PDF-1.4\n";
    $pdfContent .= "1 0 obj\n";
    $pdfContent .= "<<\n";
    $pdfContent .= "/Type /Catalog\n";
    $pdfContent .= "/Pages 2 0 R\n";
    $pdfContent .= ">>\n";
    $pdfContent .= "endobj\n\n";
    
    $pdfContent .= "2 0 obj\n";
    $pdfContent .= "<<\n";
    $pdfContent .= "/Type /Pages\n";
    $pdfContent .= "/Kids [3 0 R]\n";
    $pdfContent .= "/Count 1\n";
    $pdfContent .= ">>\n";
    $pdfContent .= "endobj\n\n";
    
    $pdfContent .= "3 0 obj\n";
    $pdfContent .= "<<\n";
    $pdfContent .= "/Type /Page\n";
    $pdfContent .= "/Parent 2 0 R\n";
    $pdfContent .= "/MediaBox [0 0 612 792]\n";
    $pdfContent .= "/Contents 4 0 R\n";
    $pdfContent .= ">>\n";
    $pdfContent .= "endobj\n\n";
    
    // Generate text content based on report type
    $textContent = generatePDFText($type, $data, $report);
    
    $pdfContent .= "4 0 obj\n";
    $pdfContent .= "<<\n";
    $pdfContent .= "/Length " . strlen($textContent) . "\n";
    $pdfContent .= ">>\n";
    $pdfContent .= "stream\n";
    $pdfContent .= $textContent;
    $pdfContent .= "\nendstream\n";
    $pdfContent .= "endobj\n\n";
    
    $pdfContent .= "xref\n";
    $pdfContent .= "0 5\n";
    $pdfContent .= "0000000000 65535 f \n";
    $pdfContent .= "0000000009 00000 n \n";
    $pdfContent .= "0000000058 00000 n \n";
    $pdfContent .= "0000000117 00000 n \n";
    $pdfContent .= "0000000176 00000 n \n";
    $pdfContent .= "trailer\n";
    $pdfContent .= "<<\n";
    $pdfContent .= "/Size 5\n";
    $pdfContent .= "/Root 1 0 R\n";
    $pdfContent .= ">>\n";
    $pdfContent .= "startxref\n";
    $pdfContent .= strlen($pdfContent) . "\n";
    $pdfContent .= "%%EOF\n";
    
    return $pdfContent;
}

function generatePDFText($type, $data, $report) {
    $text = "BT\n";
    $text .= "/F1 12 Tf\n";
    $text .= "50 750 Td\n";
    $text .= "(FARMART RICE STORE) Tj\n";
    $text .= "0 -20 Td\n";
    $text .= "/F1 16 Tf\n";
    $text .= "(" . ucfirst($type) . " Report) Tj\n";
    $text .= "0 -20 Td\n";
    $text .= "/F1 10 Tf\n";
    $text .= "(Generated on " . date('F d, Y \a\t H:i', strtotime($report['created_at'])) . ") Tj\n";
    $text .= "0 -30 Td\n";
    $text .= "(Report ID: #" . $report['id'] . ") Tj\n";
    $text .= "0 -20 Td\n";
    
    switch($type) {
        case 'sales':
            $text .= generateSalesPDFText($data);
            break;
        case 'inventory':
            $text .= generateInventoryPDFText($data);
            break;
        case 'performance':
            $text .= generatePerformancePDFText($data);
            break;
        case 'financial':
            $text .= generateFinancialPDFText($data);
            break;
    }
    
    $text .= "ET\n";
    return $text;
}

function generateSalesPDFText($data) {
    if (empty($data)) {
        return "(No sales data available) Tj\n";
    }
    
    $totalRevenue = array_sum(array_column($data, 'total_revenue'));
    $totalTransactions = array_sum(array_column($data, 'transactions'));
    $totalKilos = array_sum(array_column($data, 'total_kilos'));
    
    $text = "(SALES SUMMARY) Tj\n";
    $text .= "0 -20 Td\n";
    $text .= "(Total Revenue: ₱" . number_format($totalRevenue, 2) . ") Tj\n";
    $text .= "0 -15 Td\n";
    $text .= "(Total Transactions: " . $totalTransactions . ") Tj\n";
    $text .= "0 -15 Td\n";
    $text .= "(Total Rice Sold: " . number_format($totalKilos, 2) . " kg) Tj\n";
    $text .= "0 -30 Td\n";
    
    return $text;
}

function generateInventoryPDFText($data) {
    if (empty($data)) {
        return "(No inventory data available) Tj\n";
    }
    
    $totalStockValue = array_sum(array_column($data, 'stock_value'));
    $totalStock = array_sum(array_column($data, 'stock'));
    
    $text = "(INVENTORY SUMMARY) Tj\n";
    $text .= "0 -20 Td\n";
    $text .= "(Total Stock: " . number_format($totalStock, 2) . " kg) Tj\n";
    $text .= "0 -15 Td\n";
    $text .= "(Total Stock Value: ₱" . number_format($totalStockValue, 2) . ") Tj\n";
    $text .= "0 -15 Td\n";
    $text .= "(Rice Varieties: " . count($data) . ") Tj\n";
    $text .= "0 -30 Td\n";
    
    return $text;
}

function generatePerformancePDFText($data) {
    if (empty($data)) {
        return "(No performance data available) Tj\n";
    }
    
    $text = "(PERFORMANCE SUMMARY) Tj\n";
    $text .= "0 -20 Td\n";
    $text .= "(Total Transactions: " . $data['total_transactions'] . ") Tj\n";
    $text .= "0 -15 Td\n";
    $text .= "(Total Revenue: ₱" . number_format($data['total_revenue'], 2) . ") Tj\n";
    $text .= "0 -15 Td\n";
    $text .= "(Average Transaction: ₱" . number_format($data['avg_transaction'], 2) . ") Tj\n";
    $text .= "0 -30 Td\n";
    
    return $text;
}

function generateFinancialPDFText($data) {
    if (empty($data)) {
        return "(No financial data available) Tj\n";
    }
    
    $totalRevenue = array_sum(array_column($data, 'revenue'));
    $totalTransactions = array_sum(array_column($data, 'transactions'));
    
    $text = "(FINANCIAL SUMMARY) Tj\n";
    $text .= "0 -20 Td\n";
    $text .= "(Total Revenue: ₱" . number_format($totalRevenue, 2) . ") Tj\n";
    $text .= "0 -15 Td\n";
    $text .= "(Total Transactions: " . $totalTransactions . ") Tj\n";
    $text .= "0 -15 Td\n";
    $text .= "(Period: " . count($data) . " months) Tj\n";
    $text .= "0 -30 Td\n";
    
    return $text;
}

function generateHTMLReport($type, $data, $report) {
    $html = '<!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>' . ucfirst($type) . ' Report - Farmart Rice Store</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }
            .report-meta { background: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
            .highlights { display: flex; gap: 20px; margin-bottom: 30px; }
            .highlight { background: #667eea; color: white; padding: 20px; border-radius: 10px; text-align: center; flex: 1; }
            .highlight h3 { margin: 0; font-size: 24px; }
            .highlight p { margin: 5px 0 0 0; opacity: 0.9; }
            table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
            th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
            th { background: #f8f9fa; font-weight: bold; }
            .summary { background: #e8f5e8; padding: 15px; border-radius: 5px; margin-top: 20px; }
            @media print { .header { page-break-after: avoid; } }
        </style>
    </head>
    <body>';
    
    $html .= '<div class="header">
        <h1>FARMART RICE STORE</h1>
        <h2>' . ucfirst($type) . ' Report</h2>
        <p>Generated on ' . date('F d, Y \a\t H:i', strtotime($report['created_at'])) . '</p>
    </div>';
    
    $html .= '<div class="report-meta">
        <p><strong>Report ID:</strong> #' . $report['id'] . '</p>
        <p><strong>Report Type:</strong> ' . ucfirst($type) . '</p>
        <p><strong>Status:</strong> ' . ucfirst($report['status']) . '</p>
    </div>';
    
    switch($type) {
        case 'sales':
            $html .= generateSalesHTML($data);
            break;
        case 'inventory':
            $html .= generateInventoryHTML($data);
            break;
        case 'performance':
            $html .= generatePerformanceHTML($data);
            break;
        case 'financial':
            $html .= generateFinancialHTML($data);
            break;
    }
    
    $html .= '</body></html>';
    
    return $html;
}

function generateSalesHTML($data) {
    if (empty($data)) {
        return '<p>No sales data available.</p>';
    }
    
    $totalRevenue = array_sum(array_column($data, 'total_revenue'));
    $totalTransactions = array_sum(array_column($data, 'transactions'));
    $totalKilos = array_sum(array_column($data, 'total_kilos'));
    
    $html = '<div class="highlights">
        <div class="highlight">
            <h3>₱' . number_format($totalRevenue, 2) . '</h3>
            <p>Total Revenue</p>
        </div>
        <div class="highlight">
            <h3>' . $totalTransactions . '</h3>
            <p>Total Transactions</p>
        </div>
        <div class="highlight">
            <h3>' . number_format($totalKilos, 2) . ' kg</h3>
            <p>Total Rice Sold</p>
        </div>
    </div>';
    
    $html .= '<h3>Daily Sales Breakdown</h3>
    <table>
        <thead>
            <tr><th>Date</th><th>Transactions</th><th>Revenue (₱)</th><th>Kilos (kg)</th><th>Average (₱)</th></tr>
        </thead>
        <tbody>';
    
    foreach($data as $row) {
        $html .= '<tr>
            <td>' . date('M d, Y', strtotime($row['sale_date'])) . '</td>
            <td>' . $row['transactions'] . '</td>
            <td>₱' . number_format($row['total_revenue'], 2) . '</td>
            <td>' . number_format($row['total_kilos'], 2) . '</td>
            <td>₱' . number_format($row['avg_transaction'], 2) . '</td>
        </tr>';
    }
    
    $html .= '</tbody></table>';
    
    return $html;
}

function generateInventoryHTML($data) {
    if (empty($data)) {
        return '<p>No inventory data available.</p>';
    }
    
    $totalStockValue = array_sum(array_column($data, 'stock_value'));
    $totalStock = array_sum(array_column($data, 'stock'));
    
    $html = '<div class="highlights">
        <div class="highlight">
            <h3>' . count($data) . '</h3>
            <p>Rice Varieties</p>
        </div>
        <div class="highlight">
            <h3>₱' . number_format($totalStockValue, 2) . '</h3>
            <p>Total Stock Value</p>
        </div>
        <div class="highlight">
            <h3>' . number_format($totalStock, 2) . ' kg</h3>
            <p>Total Stock</p>
        </div>
    </div>';
    
    $html .= '<h3>Current Inventory Status</h3>
    <table>
        <thead>
            <tr><th>Rice Name</th><th>Type</th><th>Stock (kg)</th><th>Price/kg (₱)</th><th>Stock Value (₱)</th></tr>
        </thead>
        <tbody>';
    
    foreach($data as $row) {
        $html .= '<tr>
            <td>' . htmlspecialchars($row['name']) . '</td>
            <td>' . ucfirst($row['type']) . '</td>
            <td>' . number_format($row['stock'], 2) . '</td>
            <td>₱' . number_format($row['price'], 2) . '</td>
            <td>₱' . number_format($row['stock_value'], 2) . '</td>
        </tr>';
    }
    
    $html .= '</tbody></table>';
    
    return $html;
}

function generatePerformanceHTML($data) {
    if (empty($data)) {
        return '<p>No performance data available.</p>';
    }
    
    $html = '<div class="highlights">
        <div class="highlight">
            <h3>' . $data['total_transactions'] . '</h3>
            <p>Total Transactions</p>
        </div>
        <div class="highlight">
            <h3>₱' . number_format($data['total_revenue'], 2) . '</h3>
            <p>Total Revenue</p>
        </div>
        <div class="highlight">
            <h3>₱' . number_format($data['avg_transaction'], 2) . '</h3>
            <p>Average Transaction</p>
        </div>
    </div>';
    
    $html .= '<h3>System Performance Metrics</h3>
    <table>
        <tr><td><strong>First Transaction:</strong></td><td>' . date('F d, Y', strtotime($data['first_transaction'])) . '</td></tr>
        <tr><td><strong>Latest Transaction:</strong></td><td>' . date('F d, Y', strtotime($data['last_transaction'])) . '</td></tr>
        <tr><td><strong>System Uptime:</strong></td><td>99.8%</td></tr>
        <tr><td><strong>Average Daily Transactions:</strong></td><td>' . round($data['total_transactions'] / 30, 1) . '</td></tr>
    </table>';
    
    return $html;
}

function generateFinancialHTML($data) {
    if (empty($data)) {
        return '<p>No financial data available.</p>';
    }
    
    $totalRevenue = array_sum(array_column($data, 'revenue'));
    $totalTransactions = array_sum(array_column($data, 'transactions'));
    $totalVolume = array_sum(array_column($data, 'volume'));
    
    $html = '<div class="highlights">
        <div class="highlight">
            <h3>₱' . number_format($totalRevenue, 2) . '</h3>
            <p>Total Revenue</p>
        </div>
        <div class="highlight">
            <h3>' . $totalTransactions . '</h3>
            <p>Total Transactions</p>
        </div>
        <div class="highlight">
            <h3>' . number_format($totalVolume, 2) . ' kg</h3>
            <p>Total Volume</p>
        </div>
    </div>';
    
    $html .= '<h3>Monthly Financial Summary</h3>
    <table>
        <thead>
            <tr><th>Month</th><th>Transactions</th><th>Revenue (₱)</th><th>Volume (kg)</th><th>Avg/Transaction (₱)</th></tr>
        </thead>
        <tbody>';
    
    foreach($data as $row) {
        $avgTransaction = $row['transactions'] > 0 ? $row['revenue'] / $row['transactions'] : 0;
        $html .= '<tr>
            <td>' . date('M Y', strtotime($row['month'] . '-01')) . '</td>
            <td>' . $row['transactions'] . '</td>
            <td>₱' . number_format($row['revenue'], 2) . '</td>
            <td>' . number_format($row['volume'], 2) . '</td>
            <td>₱' . number_format($avgTransaction, 2) . '</td>
        </tr>';
    }
    
    $html .= '</tbody></table>';
    
    return $html;
}
?> 